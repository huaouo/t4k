// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/mq_service.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MqClient is the client API for Mq service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MqClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (Mq_PublishClient, error)
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Mq_SubscribeClient, error)
}

type mqClient struct {
	cc grpc.ClientConnInterface
}

func NewMqClient(cc grpc.ClientConnInterface) MqClient {
	return &mqClient{cc}
}

func (c *mqClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Mq_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mq_ServiceDesc.Streams[0], "/Mq/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &mqPublishClient{stream}
	return x, nil
}

type Mq_PublishClient interface {
	Send(*PubRequest) error
	Recv() (*Empty, error)
	grpc.ClientStream
}

type mqPublishClient struct {
	grpc.ClientStream
}

func (x *mqPublishClient) Send(m *PubRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mqPublishClient) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mqClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Mq_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mq_ServiceDesc.Streams[1], "/Mq/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &mqSubscribeClient{stream}
	return x, nil
}

type Mq_SubscribeClient interface {
	Send(*SubRequestOrAck) error
	Recv() (*SubResponse, error)
	grpc.ClientStream
}

type mqSubscribeClient struct {
	grpc.ClientStream
}

func (x *mqSubscribeClient) Send(m *SubRequestOrAck) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mqSubscribeClient) Recv() (*SubResponse, error) {
	m := new(SubResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MqServer is the server API for Mq service.
// All implementations must embed UnimplementedMqServer
// for forward compatibility
type MqServer interface {
	Publish(Mq_PublishServer) error
	Subscribe(Mq_SubscribeServer) error
	mustEmbedUnimplementedMqServer()
}

// UnimplementedMqServer must be embedded to have forward compatible implementations.
type UnimplementedMqServer struct {
}

func (UnimplementedMqServer) Publish(Mq_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMqServer) Subscribe(Mq_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMqServer) mustEmbedUnimplementedMqServer() {}

// UnsafeMqServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MqServer will
// result in compilation errors.
type UnsafeMqServer interface {
	mustEmbedUnimplementedMqServer()
}

func RegisterMqServer(s grpc.ServiceRegistrar, srv MqServer) {
	s.RegisterService(&Mq_ServiceDesc, srv)
}

func _Mq_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MqServer).Publish(&mqPublishServer{stream})
}

type Mq_PublishServer interface {
	Send(*Empty) error
	Recv() (*PubRequest, error)
	grpc.ServerStream
}

type mqPublishServer struct {
	grpc.ServerStream
}

func (x *mqPublishServer) Send(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mqPublishServer) Recv() (*PubRequest, error) {
	m := new(PubRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Mq_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MqServer).Subscribe(&mqSubscribeServer{stream})
}

type Mq_SubscribeServer interface {
	Send(*SubResponse) error
	Recv() (*SubRequestOrAck, error)
	grpc.ServerStream
}

type mqSubscribeServer struct {
	grpc.ServerStream
}

func (x *mqSubscribeServer) Send(m *SubResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mqSubscribeServer) Recv() (*SubRequestOrAck, error) {
	m := new(SubRequestOrAck)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Mq_ServiceDesc is the grpc.ServiceDesc for Mq service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mq_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Mq",
	HandlerType: (*MqServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _Mq_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Mq_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/mq_service.proto",
}
